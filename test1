def call(Map pipelineParams) {
    if(!pipelineParams.cleanNpm){
        pipelineParams.cleanNpm = "false"
    }

    pipelineParams.notify = 'plataforma@aldeamo.com'
    pipelineParams.testRun = '0'
    pipelineParams.vulnerabilities = 0
    pipelineParams.codesmell = 0
    pipelineParams.coverage = 0
    pipelineParams.issues = 0
    pipelineParams.deployments = 0
    pipelineParams.ipSonar = '192.168.100.150'
    pipelineParams.userSonar = 'admin'
    pipelineParams.passSonar = 'admin'
    pipelineParams.serviceVersion = ''
    pipelineParams.jarName = ''
    pipelineParams.ipAudit = '192.168.100.150'

    // ... Resto del c√≥digo ...

    pipeline {
        agent any

        tools {
            maven 'MAVEN'
            jdk 'java ' + pipelineParams.javaVersion
        }

        environment {
            DOCKER_IMAGE = 'gcr.io/redes-279321/aldeamoproducts'
            scannerHome = tool 'sonarAldeamo2'
        }

        stages {
            stage('Valid parameters') {
                steps {
                    script {
                        echo '--------------------------------[ Started get parameters ]--------------------------------'
                        functions.validParameters(pipelineParams)
                        echo '--------------------------------[ Ended get parameters ]--------------------------------'
                    }
                }
            }

            // ... Otros stages ...

            stage('Docker build') {
                steps {
                    script {
                        docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}")
                    }
                }
            }

            stage('Docker push') {
                steps {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'gcp-credentials', usernameVariable: 'GCR_USER', passwordVariable: 'GCR_PASS')]) {
                            sh "echo '${GCR_PASS}' | docker login -u '${GCR_USER}' --password-stdin https://gcr.io"
                            sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                        }
                    }
                }
            }
        }

        post {
            always {
                cleanWs()
            }
            success {
                script {
                    if (BRANCH_NAME == 'main') {
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
    }
}
